@using AspNetCoreMvcSearchingSortingPagination.Domain

@model PaginatedList<AspNetCoreMvcSearchingSortingPagination.Domain.Product>

@{
    ViewData["Title"] = "Index";
    List<SelectListItem> productLookup = ViewData["productLookup"] as List<SelectListItem>;
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

@*When you specify method="get", the form data is passed in the URL as query strings, which enables users to bookmark the URL.*@
@*The W3C guidelines recommend that you should use GET when the action doesn't result in an update*@

<form asp-action="Index" asp-route-filterChanged="" method="get">
    <div class="form-group">
        <label>Find by name</label>
        <select asp-items="@productLookup" class="form-control" name="searchString">
            <option value="">Select</option>
        </select>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-outline-success">
            Search
        </button>
    </div>
</form>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["currentSortOrder"]" asp-route-searchString="@ViewData["currentFilter"]" asp-route-sortBy="name" asp-route-changeSortOrder="yes">
                    Name
                </a>
            </th>
            <th>
                Rate
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["currentSortOrder"]" asp-route-searchString="@ViewData["currentFilter"]" asp-route-sortBy="category" asp-route-changeSortOrder="yes">
                    Category
                </a>
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Rate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category)
                </td>
                <td>
                    @*@Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                        @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                        @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortBy="@ViewData["currentSortBy"]"
   asp-route-sortOrder="@ViewData["currentSortOrder"]"
   asp-route-pageNo="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["currentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortBy="@ViewData["currentSortBy"]"
   asp-route-sortOrder="@ViewData["currentSortOrder"]"
   asp-route-pageNo="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["currentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>